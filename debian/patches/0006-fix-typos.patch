From 6463de1079c3f0a1e40cfab46810967dc8b22e19 Mon Sep 17 00:00:00 2001
From: Benda Xu <heroxbd@gentoo.org>
Date: Fri, 12 Sep 2014 10:20:56 +0900
Subject: fix typos

Bug: http://code.google.com/p/casacore/issues/detail?id=71
---
 casa/Arrays/Vector.h                        | 2 +-
 casa/OS/Path.h                              | 4 ++--
 components/ComponentModels/ComponentList.cc | 2 +-
 fits/FITS/BasicFITS.cc                      | 2 +-
 fits/apps/fits2table/fits2table.cc          | 2 +-
 images/Images/MomentCalculator.h            | 2 +-
 images/Images/MomentCalculator.tcc          | 2 +-
 ms/MeasurementSets/MSFeed.cc                | 2 +-
 scimath_f/atmroutines.f                     | 2 +-
 tables/Tables/StArrayFile.cc                | 2 +-
 tables/Tables/TSMCube.h                     | 2 +-
 11 files changed, 12 insertions(+), 12 deletions(-)

diff --git a/casa/Arrays/Vector.h b/casa/Arrays/Vector.h
index 57a6af0..1a45713 100644
--- a/casa/Arrays/Vector.h
+++ b/casa/Arrays/Vector.h
@@ -112,7 +112,7 @@ public:
     // Create a Vector from the given Block "other." Make it length "nr"
     // and copy over that many elements.
     Vector(const Block<T> &other, Int nr);
-    // Create a Vector of lenght other.nelements() and copy over its values.
+    // Create a Vector of length other.nelements() and copy over its values.
     explicit Vector(const Block<T> &other);
 
     // Create a reference to other.
diff --git a/casa/OS/Path.h b/casa/OS/Path.h
index 7e382ee..3219719 100644
--- a/casa/OS/Path.h
+++ b/casa/OS/Path.h
@@ -174,14 +174,14 @@ public:
     String resolvedName() const;
 
     // Check if pathname is valid. This function checks for: double slashes, 
-    // non-printable characters, pathname length and filename lenghts, this 
+    // non-printable characters, pathname length and filename lengths, this 
     // function is more OS-specific.
     Bool isValid() const;
 
     // Check if pathname is valid according the POSIX standard.
     // This function checks for
     // double slashes, non-printable characters,pathname length and filename 
-    // lenghts, all according to the POSIX-standard.
+    // lengths, all according to the POSIX-standard.
     Bool isStrictlyPosix() const;
 
     // Return length of path name
diff --git a/components/ComponentModels/ComponentList.cc b/components/ComponentModels/ComponentList.cc
index 4dfa94d..c6fc9f6 100644
--- a/components/ComponentModels/ComponentList.cc
+++ b/components/ComponentModels/ComponentList.cc
@@ -684,7 +684,7 @@ Bool ComponentList::ok() const {
   if (itsList.nelements() < itsNelements) {
     LogIO logErr(LogOrigin("ComponentList", "ok()"));
     logErr << LogIO::SEVERE 
-	   << "The list size is inconsistant with its cached size"
+	   << "The list size is inconsistent with its cached size"
            << LogIO::POST;
      return False;
   }
diff --git a/fits/FITS/BasicFITS.cc b/fits/FITS/BasicFITS.cc
index 855a9ab..3186aea 100644
--- a/fits/FITS/BasicFITS.cc
+++ b/fits/FITS/BasicFITS.cc
@@ -59,7 +59,7 @@ Array<Float> ReadFITS(const char *FileName, Bool &ok, String &ErrorMessage,
     if (infile.rectype() != FITS::HDURecord ||
 	infile.hdutype() != FITS::PrimaryArrayHDU) {
 	ok = False;
-	ErrorMessage = "FITS file is not an image, or is misformed "
+	ErrorMessage = "FITS file is not an image, or is malformed "
 	    "(or something)";
 	return data;
     }
diff --git a/fits/apps/fits2table/fits2table.cc b/fits/apps/fits2table/fits2table.cc
index 9cd65a2..56d5efa 100644
--- a/fits/apps/fits2table/fits2table.cc
+++ b/fits/apps/fits2table/fits2table.cc
@@ -50,7 +50,7 @@ int main(int argc, const char* argv[])
 		      "String");
 	inputs.create("output",
 		      "",
-		      "The ouput aips++ Table name",
+		      "The output aips++ Table name",
 		      "String");
 	inputs.create("which_hdu",
 		      "1",
diff --git a/images/Images/MomentCalculator.h b/images/Images/MomentCalculator.h
index 479dc19..6f31677 100644
--- a/images/Images/MomentCalculator.h
+++ b/images/Images/MomentCalculator.h
@@ -442,7 +442,7 @@ protected:
 // "all moment" vector.
    Vector<Int> selectMoments(MomentsBase<T>& iMom) const;
 
-// Fill the ouput moments array
+// Fill the output moments array
    void setCalcMoments (MomentsBase<T>& iMom,
                         Vector<T>& calcMoments,
                         Vector<Bool>& calcMomentsMask,
diff --git a/images/Images/MomentCalculator.tcc b/images/Images/MomentCalculator.tcc
index 1c04dc9..e8e75a0 100644
--- a/images/Images/MomentCalculator.tcc
+++ b/images/Images/MomentCalculator.tcc
@@ -1457,7 +1457,7 @@ void MomentCalcBase<T>::yAutoMinMax(T& yMin,
 
 
 
-// Fill the ouput moments array
+// Fill the output moments array
 template<class T>
 void MomentCalcBase<T>::setCalcMoments
                        (MomentsBase<T>& iMom,
diff --git a/ms/MeasurementSets/MSFeed.cc b/ms/MeasurementSets/MSFeed.cc
index 7cc3225..b9e3939 100644
--- a/ms/MeasurementSets/MSFeed.cc
+++ b/ms/MeasurementSets/MSFeed.cc
@@ -143,7 +143,7 @@ void MSFeed::init()
 		  "Feed id","","");
 	// FOCUS_LENGTH
 	colMapDef(FOCUS_LENGTH,"FOCUS_LENGTH",TpDouble,
-		  "Focus lenght","m","");
+		  "Focus length","m","");
 	// INTERVAL
 	colMapDef(INTERVAL,"INTERVAL",TpDouble,
 		  "Interval for which this set of parameters is accurate",
diff --git a/scimath_f/atmroutines.f b/scimath_f/atmroutines.f
index ab3a801..0da0f39 100644
--- a/scimath_f/atmroutines.f
+++ b/scimath_f/atmroutines.f
@@ -432,7 +432,7 @@ C-------------------------------------------------------------------
 *
 *--------------------------------------------
 *
-* sc = scaling factor for the wavelenght dependent part of the wet refration
+* sc = scaling factor for the wavelength dependent part of the wet refration
 * (normal conditions 300K, 1013mbar, 80% humidity -> partial pressure of
 *  water vapor 28.2mbar ):
 *
diff --git a/tables/Tables/StArrayFile.cc b/tables/Tables/StArrayFile.cc
index 390a392..dc7c2b7 100644
--- a/tables/Tables/StArrayFile.cc
+++ b/tables/Tables/StArrayFile.cc
@@ -303,7 +303,7 @@ void StManArrayFile::put (Int64 fileOff, uInt arrayOff, uInt nr,
             AlwaysAssert (leng_p < Int64(65536)*65536, DataManError);
 	    buf[i] = leng_p;
                 //
-                // Converted the string->lenght into an uInt so
+                // Converted the string->length into an uInt so
                 // the SGI compiler could find the right overloaded function
                 // some problem with string::size_t conversion
                 //
diff --git a/tables/Tables/TSMCube.h b/tables/Tables/TSMCube.h
index 8c17ba1..c3ec32d 100644
--- a/tables/Tables/TSMCube.h
+++ b/tables/Tables/TSMCube.h
@@ -168,7 +168,7 @@ public:
     // Get the bucket size (which is the length of a tile in external format).
     uInt bucketSize() const;
 
-    // Get the lenghth of a tile in local format.
+    // Get the length of a tile in local format.
     uInt localTileLength() const;
 
     // Set the hypercube shape.
